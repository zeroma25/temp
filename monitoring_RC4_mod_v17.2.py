# –ß–∞—Å—Ç—å 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Ä–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π #
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import requests
import time
import datetime
import os
import math
from colorama import init, Fore, Back, Style
from requests.exceptions import ConnectionError
from json import JSONDecodeError
from configparser import ConfigParser

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Colorama –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
init(autoreset=True)


# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é
# –ó–∞–¥–∞–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ None, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ —Ç–∏–ø–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞ –ª–æ—Ç–∞ –ø—Ä–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
trafficType = None # –¢–∏–ø –ª–æ—Ç–∞: 1 - "data", 2 - "voice", 3 - "sms"
volume = None # –†–∞–∑–º–µ—Ä –ª–æ—Ç–∞
cost = None # –°—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ—Ç–∞

# –ó–∞–ø—É—Å–∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–ø–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ monitoring_RC4_mod_multi_16.4.5.py
import argparse

# –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
parser = argparse.ArgumentParser(description="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ—Ç–æ–≤")
parser.add_argument("--volume", type=int)
parser.add_argument("--trafficType", type=int)
args = parser.parse_args()

# –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –≤–º–µ—Å—Ç–æ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
if args.volume is not None:
    volume = args.volume
if args.trafficType is not None:
    trafficType = args.trafficType
# –ö–æ–Ω–µ—Ü –∑–∞–ø—É—Å–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–ø–∏–π

# –ó–∞–º–µ–Ω–∞ —ç–º–æ–¥–∑–∏
custom_emojis = {
    "devil": "üëø",
    "cool": "üòé",
    "cat": "üê±",
    "zipped": "ü§ê",
    "scream": "üò±",
    "rich": "ü§ë",
    "tongue": "üòõ",
    "bomb": "üí£"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
if not os.path.exists('config.ini'): # –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
    open('config.ini', 'w').close()
    print(Fore.YELLOW + '–§–∞–π–ª config.ini –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.')
    with open("config.ini", "w") as file:
        file.write("""[Settings]
# interval - –∏–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ (–≤ –º–∏–Ω—É—Ç–∞—Ö)
interval = 60
# delay - –∑–∞–¥–µ—Ä–∂–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
delay = 6
# delete - —É–¥–∞–ª—è—Ç—å –ø—Ä–æ—à–ª—ã–π –ª–æ–≥ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º? (y/n)
delete = n
# depth - –≥–ª—É–±–∏–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤
depth = 50
# ask_my_lot - –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –Ω–æ–º–µ—Ä –ª–æ—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (y/n)
ask_my_lot = y

[Display]
# max_lines - —á–∏—Å–ª–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è –ª–æ—Ç–æ–≤ –∏ –ª–æ–≥–∞
max_lines = 15
# emojis - –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —ç–º–æ–¥–∑–∏ –≤ —Å–ø–∏—Å–∫–µ –ª–æ—Ç–æ–≤ (True/False)
emojis = True
# rocket - –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∑–∞—Ç—Ä–∞—Ç—ã –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–∞ —Ä–∞–∫–µ—Ç—ã (True/False)
rocket = True
# history - –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ª–æ–≥ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤ (True/False)
history = True
# info_lots - –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ª–æ—Ç—ã –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –ø–æ–¥ –æ—Å–Ω–æ–≤–Ω—ã–º —Å–ø–∏—Å–∫–æ–º (True/False)
info_lots = True

[User]
# my_names - –∏–º–µ–Ω–∞ –¥–ª—è –æ—Ç—Å–µ–∂–∏–≤–∞–Ω–∏—è: –†—É—Å—Ç–∞–º, –≠–ª—å–∑–∞ –∏ —Ç.–¥. (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å my_emojis)
my_names = 
# my_emojis - —ç–º–æ–¥–∑–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: [], [cat scream devil], [bomb bomb cool] –∏ —Ç.–¥.
my_emojis = 
# –°–ü–ò–°–û–ö –≠–ú–û–î–ó–ò: devil, cool, cat, zipped, scream, rich, tongue, bomb
""")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
config = ConfigParser()
config.read('config.ini')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
headers = {'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36'}
sellers_array = [] # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
new_elements = [] # –ù–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–ª–æ—Ç)
timestamps = [] # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è –ª–æ—Ç–æ–≤
selection_array = [] # –ú–∞—Å—Å–∏–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
raise_count = {} # –°—á—ë—Ç—á–∏–∫ –ø–æ–≤—ã—à–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞
cached_data = None # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
r_r = 1 # –°—á—ë—Ç—á–∏–∫ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
# –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤)
a, a_b, a_p, s, s_b, s_p, r = 0, 0, 0, 0, 0, 0, 0
a_int, a_b_int, a_p_int, r_int, s_int, s_b_int, s_p_int = 0, 0, 0, 0, 0, 0, 0
yes = {'yes','y', ''} # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ "–¥–∞"
no = {'no','n'} # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ "–Ω–µ—Ç"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ —Å –≥–æ–¥–æ–º –∏ –º–µ—Å—è—Ü–µ–º –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
def create_monthly_folder():
    current_year = datetime.datetime.now().year
    current_month = datetime.datetime.now().month
    folder_path = f"sales/{current_year}-{current_month:02d}"
    if not os.path.exists(folder_path):
        os.makedirs(folder_path)
    return folder_path
    

# –ß–∞—Å—Ç—å 2: –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #
# –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω—ã –≤—Ä—É—á–Ω—É—é, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Ö —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
if trafficType is None:
    while True:
        try:
            trafficType_input = int(input("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ª–æ—Ç–∞ (1-–ì–±, 2-–º–∏–Ω—É—Ç—ã, 3-SMS): "))
            if trafficType_input not in [1, 2, 3]:
                raise ValueError
            trafficType = trafficType_input
            break
        except ValueError:
            print(Fore.YELLOW + '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (1, 2 –∏–ª–∏ 3).')
# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
traffic_types = {1: "data", 2: "voice", 3: "sms"}
trafficType = traffic_types[trafficType]

if volume is None:
    while True:
        try:
            if trafficType == 'data':
                volume = int(input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ì–± (–æ—Ç 1 –¥–æ 120): '))
                if volume < 1 or volume > 120:
                    raise ValueError
            elif trafficType == 'voice':
                volume = int(input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç (–æ—Ç 50 –¥–æ 3000): '))
                if volume < 50 or volume > 3000:
                    raise ValueError
            elif trafficType == 'sms':
                volume = int(input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ SMS (–æ—Ç 50 –¥–æ 500): '))
                if volume < 50 or volume > 500:
                    raise ValueError
            break
        except ValueError:
            if trafficType == 'data':
                print(Fore.YELLOW + '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 120.')
            elif trafficType == 'voice':
                print(Fore.YELLOW + '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 50 –¥–æ 3000.')
            elif trafficType == 'sms':
                print(Fore.YELLOW + '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 50 –¥–æ 500.')

start_time = time.time() # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
start_time_str = datetime.datetime.fromtimestamp(start_time).strftime('%d.%m.%y, %H:%M')

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ config.ini
interval = config.getint("Settings", "interval", fallback=60)
delay = config.getint("Settings", "delay", fallback=6)
delete = config.get("Settings", "delete", fallback="n")
interval *= 60 # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥—ã
depth = config.getint("Settings", "depth", fallback=50)
ask_my_lot = config.get("Settings", "ask_my_lot", fallback="y").lower() in yes

max_lines = config.getint("Display", "max_lines", fallback=15) # v11 –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é 25
display_emojis = config.getboolean("Display", "emojis", fallback=True)  # –§–ª–∞–≥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–º–æ–¥–∑–∏
display_count = config.getboolean("Display", "rocket", fallback=True)  # –§–ª–∞–≥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—ã—à–µ–Ω–∏–π
display_history = config.getboolean("Display", "history", fallback=True)  # –§–ª–∞–≥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–¥–∞–∂
info_lots = config.getboolean("Display", "info_lots", fallback=True)

my_names = config.get("User", "my_names", fallback="") # v13
my_emojis = config.get("User", "my_emojis", fallback="") # v13

# –ï—Å–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ—Ç–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞ –≤—Ä—É—á–Ω—É—é, –ø–æ–ª—É—á–∞–µ–º –µ—ë —á–µ—Ä–µ–∑ API
if cost is None:
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
        if trafficType == "data":
            min_cost = volume * 15
            max_cost = volume * 50
        elif trafficType == "voice":
            min_cost = math.ceil(volume * 0.8)  # –û–∫—Ä—É–≥–ª—è–µ–º –≤–≤–µ—Ä—Ö
            max_cost = volume * 2
        elif trafficType == "sms":
            min_cost = math.ceil(volume * 0.5)  # –û–∫—Ä—É–≥–ª—è–µ–º –≤–≤–µ—Ä—Ö
            max_cost = math.floor(volume * 5.5)  # –û–∫—Ä—É–≥–ª—è–µ–º –≤–Ω–∏–∑

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        while True:
            try:
                cost_input = input(f"–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ—Ç–∞ (–æ—Ç {min_cost} –¥–æ {max_cost} ‚ÇΩ) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π: ")
                if cost_input.strip() == "":  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º minCost
                    response = requests.get(f"https://t2.ru/api/exchange/lots/stats/volumes?trafficType={trafficType}", headers=headers, timeout=5)
                    data = response.json()

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ª–æ—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º volume
                    volume_exists = any(item['volume'] == volume for item in data['data'])
                    if not volume_exists:
                        print(Fore.RED + f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
                        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
                        exit()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É, –µ—Å–ª–∏ –ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω

                    def get_cost(volume):
                        for item in data['data']:
                            if item['volume'] == volume:
                                return item.get("minCost")
                        return None
                    cost = get_cost(volume)
                    break
                else:
                    cost = float(cost_input)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —á–∏—Å–ª–æ
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
                    if min_cost <= cost <= max_cost:
                        break
                    else:
                        print(Fore.YELLOW + f"–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç {min_cost} –¥–æ {max_cost} ‚ÇΩ.")
            except ValueError:
                print(Fore.YELLOW + "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
    except (JSONDecodeError, ConnectionError, requests.exceptions.ReadTimeout):
        print(Fore.RED + '–ù–µ—Ç —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º')
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        exit()


# –ß–∞—Å—Ç—å 3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞ #
# –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–æ—Ç–æ–≤ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
try:
    response = requests.get(f"https://t2.ru/api/exchange/lots?trafficType={trafficType}&volume={volume}&cost={cost}&limit=5000", headers=headers, timeout=5) 
    data = response.json()
except (JSONDecodeError, ConnectionError, requests.exceptions.ReadTimeout):
    print(Fore.YELLOW + '–ù–µ—Ç —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ª–æ—Ç–∞–º–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Ö –≤ —Å–ø–∏—Å–æ–∫
for item in reversed(data["data"]):
    seller = item.get("seller", {})
    name = seller.get("name")
    emojis = seller.get("emojis")
    id = item.get("id")
    my = item.get("my")
    seller_list = ["–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü", emojis, str(id), str(my)] if name is None else [name, emojis, str(id), str(my)]
    sellers_array.insert(0, seller_list)
    timestamps.insert(0, time.time())
    
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–º–æ–¥–∑–∏
def format_emojis(emojis):
    # –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —ç–º–æ–¥–∑–∏ –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—ã–µ, –∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ ‚Äî –Ω–∞ \u3000
    custom_emojis_list = [custom_emojis.get(emoji, "\u3000") for emoji in emojis]
    while len(custom_emojis_list) < 3:  # –ï—Å–ª–∏ —ç–º–æ–¥–∑–∏ –º–µ–Ω—å—à–µ 3, –¥–æ–±–∞–≤–ª—è–µ–º —à–∏—Ä–æ–∫–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–æ
        custom_emojis_list.insert(0, "\u3000")  # –®–∏—Ä–æ–∫–∏–π –ø—Ä–æ–±–µ–ª Unicode
    return " ".join(custom_emojis_list[:3])  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å 3 —ç–º–æ–¥–∑–∏

if ask_my_lot:
    # –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ª–æ—Ç–æ–≤ —Å –ø–æ—Ä—è–¥–∫–æ–≤—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏, –∏–º–µ–Ω–∞–º–∏ –∏ —ç–º–æ–¥–∑–∏ (–±–µ–∑ –±–æ—Ç–æ–≤)
    print("–°–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤:")
    seller_count = 0  # –°—á—ë—Ç—á–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
    displayed_lots = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ –≤—ã–≤–µ–¥–µ–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤

    for index, item in enumerate(data["data"][:depth]):  # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ª–æ—Ç–∞–º, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ max_lines
        seller = item.get("seller", {})
        name = seller.get("name")
        emojis = seller.get("emojis", [])
        my = item.get("my")  # –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –±–æ—Ç —ç—Ç–æ –∏–ª–∏ –ø—Ä–æ–¥–∞–≤–µ—Ü
    
        # –ï—Å–ª–∏ —ç—Ç–æ –±–æ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
        if my:
            continue
    
        # –ï—Å–ª–∏ –∏–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ –Ω–∞ "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü"
        name = "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü" if name is None else name
    
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —ç–º–æ–¥–∑–∏
        formatted_emojis = format_emojis(emojis)
    
        # –í—ã–≤–æ–¥–∏–º –ª–æ—Ç —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π –ø–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ (3 —Å–∏–º–≤–æ–ª–∞) –∏ –∏–º–µ–Ω–∏ (24 —Å–∏–º–≤–æ–ª–∞)
        print(f"{index + 1:<3} {Fore.GREEN}{name:<19} [{formatted_emojis}]")
    
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ª–æ—Ç–∞
        displayed_lots.append(index)
    
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
        seller_count += 1
    
        # –ï—Å–ª–∏ –≤—ã–≤–µ–ª–∏ 10 –ø—Ä–æ–¥–∞–≤—Ü–æ–≤, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª
        if seller_count >= 10:
            break
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–≤–æ–¥ –ø–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –ª–æ—Ç–∞ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
    try:
        user_input = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–æ—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞: ")  # –ü–æ–ª—É—á–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_input.strip() == "":  # –ï—Å–ª–∏ –≤–≤–æ–¥ –ø—É—Å—Ç–æ–π (–Ω–∞–∂–∞—Ç Enter)
            highlight_id = None  # –ù–µ –≤—ã–¥–µ–ª—è–µ–º –ª–æ—Ç
        else:
            lot_number = int(user_input)  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –ª–æ—Ç–∞, –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –≤—ã–≤–µ–¥–µ–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤
            if lot_number < 1 or lot_number > len(data["data"]):
                raise ValueError
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –±—ã–ª –≤—ã–≤–µ–¥–µ–Ω –Ω–∞ —ç–∫—Ä–∞–Ω (–∏—Å–∫–ª—é—á–∞–µ–º –±–æ—Ç–æ–≤)
            if (lot_number - 1) not in displayed_lots:
                raise ValueError
            # –ü–æ–ª—É—á–∞–µ–º ID –ª–æ—Ç–∞ –ø–æ –µ–≥–æ –∏–Ω–¥–µ–∫—Å—É
            selected_lot = data["data"][lot_number - 1]
            highlight_id = selected_lot.get("id")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
    except ValueError:
        print(Fore.YELLOW + "–í–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ª–æ—Ç–∞.")
        input("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")  # –ü–∞—É–∑–∞, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
        highlight_id = None  # –°–±—Ä–æ—Å –≤—ã–¥–µ–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ–≤–µ—Ä–Ω—ã–π
else:
    highlight_id = None  # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ –ª–æ—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω, highlight_id –æ—Å—Ç–∞–µ—Ç—Å—è None


# –ß–∞—Å—Ç—å 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ—Ç–æ–≤ –∏ –ø—Ä–æ–¥–∞–∂ #
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ª–æ—Ç–∞
def check(id):
    global cached_data
    if not cached_data:
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –±—ã–ª–∏ —Ä–∞–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
            response = requests.get(f"https://t2.ru/api/exchange/lots?trafficType={trafficType}&volume={volume}&&limit=500", headers=headers, timeout=5) ####### limit=500 –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é #######
            cached_data = response.json()
        except (JSONDecodeError, ConnectionError, requests.exceptions.ReadTimeout):
            print(Fore.YELLOW + '–ù–µ—Ç —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º')
            time.sleep(10)

    try:
        # –ò—â–µ–º –ª–æ—Ç –ø–æ id –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        for item in cached_data["data"]:
            id_check = item.get("id")
            cost_change = item.get("cost").get("amount")
            if id_check == id:
                return True, cost_change
    except Exception as e:
        print(Fore.YELLOW + f'–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –û—à–∏–±–∫–∞: {e}')
    return False, None


# –ß–∞—Å—Ç—å 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ—Ç–∞—Ö –≤ —Ñ–∞–π–ª—ã #
# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ—Ç–∞—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ –∏ –æ–±—ä–µ–º–∞
trafficTypeFile = "gb" if trafficType == "data" else "min" if trafficType == "voice" else "sms" # v08
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ –∏ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏–µ, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
folder_path = create_monthly_folder()
file_path = f"{folder_path}/sales_{trafficTypeFile}_{volume}_{str(cost).replace('.0', '')}.txt"
if not os.path.exists(file_path):
    open(file_path, 'w').close()

# –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω—É–∂–Ω–æ –ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–¥–∞–∂
while True: # v08
    if delete in yes: # v08
        # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–¥–∞–∂
        open(file_path, 'w').close()
        break # v08
    elif delete in no: # v08
        break # v08


# –ß–∞—Å—Ç—å 6: –°–±–æ—Ä –∏ –∑–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ –ª–æ—Ç–∞—Ö #
trafficTypeVisual = " –ì–±" if trafficType == "data" else " –º–∏–Ω" if trafficType == "voice" else " SMS"

if a == 0: # v10 –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
    k = round((s_p/(a+1+r))*100, 1) # v10 –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
else: # v10 –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
    k = round((s_p/(a+r))*100, 1) # v10 –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç

# –ó–∞–ø–∏—Å—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
folder_path = create_monthly_folder()
file_path = f"{folder_path}/sales_{trafficTypeFile}_{volume}_{str(cost).replace('.0', '')}.txt"
with open(file_path, "a", encoding="utf-8") as f:
    f.write('==========================================================\n')
    f.write('–°—Ç–∞—Ä—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ' + datetime.datetime.now().strftime("%d.%m.%y, %H:%M") + f". –õ–æ—Ç: {volume}{trafficTypeVisual} - " + f"{str(cost).replace('.0', '')} ‚ÇΩ.\n")
    f.write('==========================================================\n')


# –ß–∞—Å—Ç—å 7: –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ—Ç–æ–≤ –∏ –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ #
while True:

    if a == 0: # v10 –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        k = round((s_p/(a+1+r))*100, 1) # v10 –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
    else: # v10 –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        k = round((s_p/(a+r))*100, 1) # v10 –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç

    current_time = time.time()
    elapsed_time = current_time - start_time

    # –ï—Å–ª–∏ –ø—Ä–æ—à—ë–ª –∑–∞–¥–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏, —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª
    if elapsed_time > interval:
        # –í—ã—á–∏—Å–ª—è–µ–º k_int –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–Ω–∏—Ü—ã –∑–Ω–∞—á–µ–Ω–∏–π –∑–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª
        s_p_diff = s_p - s_p_int  # –ü—Ä–æ–¥–∞–∂–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞–º–∏ –∑–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª
        a_diff = a - a_int  # –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª
        r_diff = r - r_int  # –†–∞–∫–µ—Ç—ã –∑–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª

        if a_diff == 0: # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ 0, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º—É–ª—É —Å +1
            k_int = round((s_p_diff / (a_diff + 1 + r_diff)) * 100, 1)
        else: # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ñ–æ—Ä–º—É–ª—É
            k_int = round((s_p_diff / (a_diff + r_diff)) * 100, 1)

        folder_path = create_monthly_folder()
        file_path = f"{folder_path}/sales_{trafficTypeFile}_{volume}_{str(cost).replace('.0', '')}.txt"
        with open(file_path, "a", encoding="utf-8") as f:
            f.write('----------------------------------------------------------\n' + datetime.datetime.now().strftime("%d.%m.%y, %H:%M") + f'. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {round(interval / 60)} –º–∏–Ω.:\n')#v09
            f.write(f'–°–æ–∑–¥–∞–Ω–æ: {str(a - a_int):<4} –ë–æ—Ç–∞–º–∏: {str(a_b - a_b_int):<4} –ü—Ä–æ–¥–∞–≤—Ü–∞–º–∏: {str(a_p - a_p_int):<4} –†–∞–∫–µ—Ç: {str(r - r_int)}\n')
            f.write(f'–ü—Ä–æ–¥–∞–Ω–æ: {str(s - s_int):<4} –ë–æ—Ç–∞–º–∏: {str(s_b - s_b_int):<4} –ü—Ä–æ–¥–∞–≤—Ü–∞–º–∏: {str(s_p - s_p_int):<4} –ö–æ—ç—Ñ.: {str(k_int)}\n')
            f.write('----------------------------------------------------------\n\n')
            start_time += interval # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        a_int, a_b_int, a_p_int, r_int = a, a_b, a_p, r # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        s_int, s_b_int, s_p_int = s, s_b, s_p

    # –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞
    os.system('cls' if os.name == 'nt' else 'clear')

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–æ–≤ –∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
    bot_count = 0
    seller_count = 0

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ—Ç–æ–≤ –∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –≤ –ø–µ—Ä–≤—ã—Ö 100 –ª–æ—Ç–∞—Ö
    for index, item in enumerate(data["data"][:100]):  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 100 –ª–æ—Ç–æ–≤
        seller = item.get("seller", {})
        my = item.get("my")  # –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –±–æ—Ç —ç—Ç–æ –∏–ª–∏ –ø—Ä–æ–¥–∞–≤–µ—Ü

        if my:  # –ï—Å–ª–∏ —ç—Ç–æ –±–æ—Ç
            bot_count += 1
        else:  # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–¥–∞–≤–µ—Ü
            seller_count += 1

    # –í—ã–≤–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    print(Fore.WHITE + f"–°—Ç–∞—Ä—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {Fore.YELLOW}{start_time_str}")  # –í—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
    print(Fore.WHITE + f"–õ–æ—Ç: {Fore.YELLOW}{volume}{trafficTypeVisual}. " + f"{Fore.WHITE}–°—Ç–æ–∏–º–æ—Å—Ç—å: {Fore.YELLOW}{str(cost).replace('.0', '')} ‚ÇΩ.")
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫
    a_str = Fore.WHITE + '–°–æ–∑–¥–∞–Ω–æ: ' + Back.WHITE + Fore.BLACK + f"{a:>4}" + Style.RESET_ALL + Fore.WHITE + ' (' + Fore.RED + str(a_b) + Fore.WHITE + ' + ' + Fore.GREEN + str(a_p) + Fore.WHITE + ')  '
    s_str = Fore.WHITE + '–ü—Ä–æ–¥–∞–Ω–æ: ' + Back.GREEN + Fore.BLACK + f"{s:>4}" + Style.RESET_ALL + Fore.WHITE + ' (' + Fore.RED + str(s_b) + Fore.WHITE + ' + ' + Fore.GREEN + str(s_p) + Fore.WHITE + ')  '
    
    # –£–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª–∏–Ω—ã
    def clean_length(s):
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ ANSI-–∫–æ–¥—ã (—Ü–≤–µ—Ç–∞) –∏–∑ —Å—Ç—Ä–æ–∫–∏
        import re
        return len(re.sub(r'\x1b\[[0-9;]*m', '', s))
    
    # –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫ –¥–æ "–†–∞–∫–µ—Ç:" –∏ "–ö–æ—ç—Ñ.:"
    a_length = clean_length(a_str)
    s_length = clean_length(s_str)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
    max_length = max(a_length, s_length)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
    r_str = ' ' * (max_length - a_length) + '–†–∞–∫–µ—Ç: ' + Back.CYAN + Fore.BLACK + f"{r:>4}"
    k_str = ' ' * (max_length - s_length) + '–ö–æ—ç—Ñ.: ' + Back.MAGENTA + f"{k:>4}"
    
    # –í—ã–≤–æ–¥
    print(a_str + r_str)
    print(s_str + k_str)
#    print(f'{Fore.WHITE}–ü–µ—Ä–≤—ã–µ 100 –ª–æ—Ç–æ–≤: {Fore.RED}{bot_count}{Fore.WHITE} / {Fore.GREEN}{seller_count}')

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏–Ω—É —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
    separator_length = 24  # –ë–∞–∑–æ–≤–∞—è –¥–ª–∏–Ω–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
    if display_emojis:
        separator_length += 12  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª–∏–Ω—É –ø–æ–ª—è –¥–ª—è —ç–º–æ–¥–∑–∏
    if display_count:
        separator_length += 3  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª–∏–Ω—É –ø–æ–ª—è –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—ã—à–µ–Ω–∏–π
    separator = "-" * separator_length
    print(separator)  # –í—ã–≤–æ–¥ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è


# –ß–∞—Å—Ç—å 8: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ—Ç–∞—Ö (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ª–æ—Ç–æ–≤, –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –ø—Ä–æ–¥–∞–∂) #
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–æ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è
    counter = 0

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø—Ä–æ–¥–∞–∂ –¥–ª—è —á—Ç–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 100 —Å—Ç—Ä–æ–∫
    folder_path = create_monthly_folder()
    file_path = f"{folder_path}/sales_{trafficTypeFile}_{volume}_{str(cost).replace('.0', '')}.txt"
    with open(file_path, "r", encoding="utf-8") as file:
        lines = file.readlines()[-100:] # –ß—Ç–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 100 —Å—Ç—Ä–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º–µ–Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞—Ç—É—Å "‚úÖ" (–ø—Ä–æ–¥–∞–≤–µ—Ü), "‚ùå" (–±–æ—Ç) –∏–ª–∏ "üôÇ" (–º–æ–π)
    names = [line.strip().split("–õ–æ—Ç: ")[0] for line in lines if '‚úÖ' in line or '‚ùå' in line or 'üôÇ' in line]
    names_reversed = list(reversed(names)) # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫

    # –ü–æ–ª—É—á–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
    try:
        for index, item in enumerate(data["data"][:max_lines]):  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ max_lines –ª–æ—Ç–æ–≤
            seller = item.get("seller", {}) # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
            name = seller.get("name") # –ò–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞
            emojis = seller.get("emojis") # –≠–º–æ–¥–∑–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞
            trafficType = item.get("trafficType") # –¢–∏–ø —Ç—Ä–∞—Ñ–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "data", "voice", "sms")
            id = item.get("id")
            my = item.get("my") # –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –±–æ—Ç —ç—Ç–æ –∏–ª–∏ –ø—Ä–æ–¥–∞–≤–µ—Ü (True - –±–æ—Ç, False - –ø—Ä–æ–¥–∞–≤–µ—Ü)

#            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –¥–æ 3
#            def format_emojis(emojis):
#                # –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —ç–º–æ–¥–∑–∏ –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—ã–µ, –∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ ‚Äî –Ω–∞ \u3000
#                custom_emojis_list = [custom_emojis.get(emoji, "\u3000") for emoji in emojis]
#                while len(custom_emojis_list) < 3:  # –ï—Å–ª–∏ —ç–º–æ–¥–∑–∏ –º–µ–Ω—å—à–µ 3, –¥–æ–±–∞–≤–ª—è–µ–º —à–∏—Ä–æ–∫–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–æ
#                    custom_emojis_list.insert(0, "\u3000")  # –®–∏—Ä–æ–∫–∏–π –ø—Ä–æ–±–µ–ª Unicode
#                return " ".join(custom_emojis_list[:3]) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å 3 —ç–º–æ–¥–∑–∏

            original_emojis = emojis[:]  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —ç–º–æ–¥–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
            formatted_emojis = format_emojis(original_emojis)  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —ç–º–æ–¥–∑–∏

            # –ï—Å–ª–∏ –∏–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ –Ω–∞ "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü"
            name = "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü" if name is None else name

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è –∏–º–µ–Ω–∏ –∏ —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∫—Ç–æ –¥–æ–±–∞–≤–∏–ª –ª–æ—Ç (–ø—Ä–æ–¥–∞–≤–µ—Ü –∏–ª–∏ –±–æ—Ç)
            if my is False:  # –ï—Å–ª–∏ –ª–æ—Ç –Ω–µ –±–æ—Ç
                if str(id) == str(highlight_id):
                    name = Fore.MAGENTA + str(name)
                    emojis = Fore.MAGENTA + f"[{formatted_emojis}]"
                elif name in my_names and f"[{' '.join(original_emojis)}]" in my_emojis:  # –ü—É—Ä–ø—É—Ä–Ω—ã–π –¥–ª—è my_names + my_emojis
                    name = Fore.MAGENTA + str(name)
                    emojis = Fore.MAGENTA + f"[{formatted_emojis}]"
                else:  # –ó–µ–ª—ë–Ω—ã–π –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞
                    name = Fore.GREEN + str(name)
                    emojis = Fore.GREEN + f"[{formatted_emojis}]"
            else:  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –±–æ—Ç–∞
                name = Fore.RED + str(name)
                emojis = Fore.RED + f"[{formatted_emojis}]"

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ª–æ—Ç–æ–≤
            counter += 1

            seller_id = item.get("id") # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ª–æ—Ç–∞
            count = raise_count.get(seller_id) # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—ã—à–µ–Ω–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ª–æ—Ç–∞
            if not count:
                count = 0 # –ï—Å–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ª–æ—Ç–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø–æ–≤—ã—à–µ–Ω–∏—è—Ö, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –≤ 0

            # –ü–µ—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ—Ç–µ         
            if counter <= len(names):
                # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –ª–æ—Ç–∞ < –∏–ª–∏ = –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏–º–µ–Ω –≤ —Ñ–∞–π–ª–µ, –≤—ã–≤–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é, –∏–º—è, —ç–º–æ–¥–∑–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—ã—à–µ–Ω–∏–π + —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
                format_string = "{:<3} {:<24}"  # –ë–∞–∑–æ–≤–∞—è —Ñ–æ—Ä–º–∞—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
                print_items = [counter, name]
                if display_emojis:
                    format_string += " {:<13}"
                    print_items.append(emojis)
                if display_count:
                    format_string += " {:<3}"
                    print_items.append(count*5)
                if display_history:
                    format_string += " {}"
                    print_items.append(Fore.WHITE + str(names_reversed[counter - 1]))
                print(format_string.format(*print_items))
            else:
                # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –ª–æ—Ç–∞ –±–æ–ª—å—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–º—ë–Ω, –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –∏–º—è, —ç–º–æ–¥–∑–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—ã—à–µ–Ω–∏–π
                format_string = "{:<3} {:<24}"  # –ë–∞–∑–æ–≤–∞—è —Ñ–æ—Ä–º–∞—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
                print_items = [counter, name]
                if display_emojis:
                    format_string += " {:<13}"
                    print_items.append(emojis)
                if display_count:
                    format_string += " {:<3}"
                    print_items.append(count*5)
                print(format_string.format(*print_items))
                
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤
        highlighted_lots = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ª–æ—Ç –≤ selection_array
        for index, item in enumerate(selection_array):
            name = item[0]
            emojis = item[1]
            id = item[2]
            my = item[3]
        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –ª–æ—Ç —É—Å–ª–æ–≤–∏—è–º –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
            if (str(id) == str(highlight_id)) or (name in my_names and f"[{' '.join(emojis)}]" in my_emojis):
                if max_lines <= index < depth:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ª–æ—Ç–∞
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º—è –∏ —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ª–æ—Ç–∞
                    formatted_emojis = format_emojis(emojis)
                    name = Fore.MAGENTA + str(name)
                    emojis = Fore.MAGENTA + f"[{formatted_emojis}]"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ—Ç –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤
                    highlighted_lots.append((index + 1, name, emojis, raise_count.get(id, 0) * 5))
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ –ª–æ—Ç—ã, –≤—ã–≤–æ–¥–∏–º –∏—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å–µ–∫—Ü–∏–∏
        if highlighted_lots:
            print(separator)
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–º –ª–æ—Ç–µ
            for pos, name, emojis, count in highlighted_lots:
                format_string = "{:<3} {:<24}"  # –ë–∞–∑–æ–≤–∞—è —Ñ–æ—Ä–º–∞—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
                print_items = [pos, name]
                if display_emojis:
                    format_string += " {:<13}"
                    print_items.append(emojis)
                if display_count:
                    format_string += " {:<3}"
                    print_items.append(count)
                print(format_string.format(*print_items))

    except KeyError:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–∞–∫–∏–µ-–ª–∏–±–æ –¥–∞–Ω–Ω—ã–µ
        print(Fore.YELLOW + "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.")
        pass
    print(separator)  # –í—ã–≤–æ–¥ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è

    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ª–æ—Ç–∞—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
    try:
        response = requests.get(f"https://t2.ru/api/exchange/lots?trafficType={trafficType}&volume={volume}&cost={cost}&limit=300", headers=headers, timeout=5) ####### limit=300 –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é #######
        data = response.json() # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç JSON

    except (JSONDecodeError, ConnectionError, requests.exceptions.ReadTimeout):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
        print(Fore.YELLOW + '–ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º')
        time.sleep(10) # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        continue


# –ß–∞—Å—Ç—å 9: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –ª–æ—Ç–æ–≤ –∏ –∏—Ö –∑–∞–ø–∏—Å—å #
    # –ü–æ–ª—É—á–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –ª–æ—Ç—ã
    new_elements = []
    selection_array = []
    for item in reversed(data["data"]):
        seller = item.get("seller", {})
        name = seller.get("name")
        emojis = seller.get("emojis")
        id = item.get("id")
        my = item.get("my")
        # –ï—Å–ª–∏ –∏–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞ None, —Ç–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü"
        seller_list = ["–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü", emojis, str(id), str(my)] if name is None else [name, emojis, str(id), str(my)]

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞ –≤ –º–∞—Å—Å–∏–≤ selection_array
        selection_array.insert(0, seller_list)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ª–æ—Ç –≤ —Å–ø–∏—Å–∫–µ sellers_array (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º)
        if seller_list[-2] not in [element[-2] for element in sellers_array]:
            new_elements.insert(0, seller_list) # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –º–∞—Å—Å–∏–≤
            a += 1 # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤
            sellers_array.insert(0, seller_list) # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ—Ç –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
            timestamps.insert(0, time.time()) # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ª–æ—Ç–∞

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –¥–ª—è –±–æ—Ç–æ–≤ –∏–ª–∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è my
            value = seller_list[-1]
            if value == 'True':
                a_b += 1 # –õ–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –±–æ—Ç–æ–º
            elif value == 'False':
                a_p += 1 # –õ–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–¥–∞–≤—Ü–æ–º
        else:
            # –ï—Å–ª–∏ –ª–æ—Ç —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            for i, element in enumerate(sellers_array):
                if element[-2] == seller_list[-2] and element[0] != seller_list[0]:
                    sellers_array[i] = seller_list # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ—Ç–µ
                    break


# –ß–∞—Å—Ç—å 10: –í—ã–≤–æ–¥ –Ω–æ–≤—ã—Ö –ª–æ—Ç–æ–≤ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å #
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ–∫–æ–Ω—á–∞–Ω–∏–π –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    def get_lot_ending(count, header_type=None):
        if count % 10 == 1 and count % 100 != 11:
            if header_type == "sold":
                return "–ü—Ä–æ–¥–∞–Ω", "–ª–æ—Ç"
            elif header_type == "expired":
                return "–°–≥–æ—Ä–µ–ª", "–ª–æ—Ç"
            elif header_type == "changed":
                return "–°—Ç–æ–∏–º–æ—Å—Ç—å", "-–≥–æ –ª–æ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞"
            elif header_type == "raise":
                return "–ü–æ–¥–Ω—è—Ç –≤ —Ç–æ–ø", "–ª–æ—Ç"
            else:
                return "–°–æ–∑–¥–∞–Ω", "–ª–æ—Ç"
        elif count % 10 in [2, 3, 4] and not (count % 100 in [12, 13, 14]):
            if header_type == "sold":
                return "–ü—Ä–æ–¥–∞–Ω–æ", "–ª–æ—Ç–∞"
            elif header_type == "expired":
                return "–°–≥–æ—Ä–µ–ª–æ", "–ª–æ—Ç–∞"
            elif header_type == "changed":
                return "–°—Ç–æ–∏–º–æ—Å—Ç—å", "-—Ö –ª–æ—Ç–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∞"
            elif header_type == "raise":
                return "–ü–æ–¥–Ω—è—Ç–æ –≤ —Ç–æ–ø", "–ª–æ—Ç–∞"
            else:
                return "–°–æ–∑–¥–∞–Ω–æ", "–ª–æ—Ç–∞"
        else:
            if header_type == "sold":
                return "–ü—Ä–æ–¥–∞–Ω–æ", "–ª–æ—Ç–æ–≤"
            elif header_type == "expired":
                return "–°–≥–æ—Ä–µ–ª–æ", "–ª–æ—Ç–æ–≤"
            elif header_type == "changed":
                return "–°—Ç–æ–∏–º–æ—Å—Ç—å", "-—Ç–∏ –ª–æ—Ç–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∞"
            elif header_type == "raise":
                return "–ü–æ–¥–Ω—è—Ç–æ –≤ —Ç–æ–ø", "–ª–æ—Ç–æ–≤"
            else:
                return "–°–æ–∑–¥–∞–Ω–æ", "–ª–æ—Ç–æ–≤"
    # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –≤—ã–≤–æ–¥–∏–º –∏—Ö –Ω–∞ —ç–∫—Ä–∞–Ω
    if len(new_elements) > 0:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤
        count_added = len(new_elements)
        added_ending, lot_ending = get_lot_ending(count_added)  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        print(f"{Back.WHITE}{Fore.BLACK}{added_ending} {count_added} {lot_ending}{Style.RESET_ALL} (‚ûï)")
        if info_lots:
            for element in new_elements:

#                # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—ã–µ
#                def format_emojis(emojis):
#                    # –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —ç–º–æ–¥–∑–∏ –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—ã–µ, –∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ ‚Äî –Ω–∞ \u3000
#                    custom_emojis_list = [custom_emojis.get(emoji, "\u3000") for emoji in emojis]
#                    while len(custom_emojis_list) < 3:  # –ï—Å–ª–∏ —ç–º–æ–¥–∑–∏ –º–µ–Ω—å—à–µ 3, –¥–æ–±–∞–≤–ª—è–µ–º —à–∏—Ä–æ–∫–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–æ
#                        custom_emojis_list.insert(0, "\u3000")  # –®–∏—Ä–æ–∫–∏–π –ø—Ä–æ–±–µ–ª Unicode
#                    return " ".join(custom_emojis_list[:3])  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å 3 —ç–º–æ–¥–∑–∏

                # –ï—Å–ª–∏ –ª–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –±–æ—Ç–æ–º, –≤—ã–≤–æ–¥–∏–º –µ–≥–æ –∫—Ä–∞—Å–Ω—ã–º, –µ—Å–ª–∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–º ‚Äî –∑–µ–ª–µ–Ω—ã–º
                if element[-1] == 'True':
                    formatted_emojis = format_emojis(element[1])  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —ç–º–æ–¥–∑–∏
                    print(f"  {'+'} {Fore.RED}{str(element[0]):<19} [{formatted_emojis}]")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–º–µ–Ω–µ–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏
                else:
                    formatted_emojis = format_emojis(element[1])  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —ç–º–æ–¥–∑–∏
                    print(f"  {'+'} {Fore.GREEN}{str(element[0]):<19} [{formatted_emojis}]")
            print()


# –ß–∞—Å—Ç—å 11: –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª #
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ—Ç–∞—Ö
    folder_path = create_monthly_folder()
    file_path = f"{folder_path}/sales_{trafficTypeFile}_{volume}_{str(cost).replace('.0', '')}.txt"
    with open(file_path, "a", encoding="utf-8") as f:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ª–æ—Ç–∞—Ö
        expired_lots = []  # –°–ø–∏—Å–æ–∫ —Å–≥–æ—Ä–µ–≤—à–∏—Ö –ª–æ—Ç–æ–≤
        sold_lots = []  # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤
        price_changed_lots = []  # –°–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤ —Å –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
        sold_ids = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤

        for element in sellers_array[:depth]:  # –ì–ª—É–±–∏–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ—Ç–æ–≤
            id = element[-2]
            if id not in [element[-2] for element in selection_array]:
                # –ï—Å–ª–∏ –ª–æ—Ç –∏–∑ selection_array –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ sellers_array, —ç—Ç–æ –Ω–æ–≤—ã–π –ª–æ—Ç
                pos = sellers_array.index(element) - len(new_elements) + 1
                timestamp_index = [element[-2] for element in sellers_array].index(id)
                timestamp = timestamps[timestamp_index]
                count = raise_count.get(id)
                if not count:
                    count = 0  # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—ã—à–µ–Ω–∏–π, —Å—Ç–∞–≤–∏–º 0

                # –ó–∞–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏
                emojis = element[1][:]  # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞ —ç–º–æ–¥–∑–∏
                for j in range(len(emojis)):
                    emojis[j] = custom_emojis.get(emojis[j], "\u3000")  # –ó–∞–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª–∏–Ω–Ω—ã–π –ø—Ä–æ–±–µ–ª
                while len(emojis) < 3:
                    emojis.insert(0, "\u3000")

                # –ï—Å–ª–∏ –ª–æ—Ç –±—ã–ª –ë–û–¢–û–ú –∏ –Ω–µ –±—ã–ª –ø—Ä–æ–¥–∞–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–∞—Å–∞, –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º
                if (element[-1] == 'True' and 0 <= time.time() - timestamp <= 3600):  # –õ–æ—Ç –ø—Ä–æ–¥–∞–Ω
                    if id not in sold_ids:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ª–æ—Ç —É–∂–µ –ø—Ä–æ–¥–∞–Ω
                        sold_lots.append((pos, Fore.RED + str(element[0]), f" [{' '.join(emojis)}]"))
                        f.write('{} '.format(datetime.datetime.now().strftime("%d.%m.%y %H:%M")) + '‚ùå ' + str(element[0]) + ' (' + str(pos) + ')' + "\n")
                        sold_ids.add(id)  # –î–æ–±–∞–≤–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ
                        s_b += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫–∏ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤ –±–æ—Ç–∞–º–∏
                        s += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤
                elif (element[-1] == 'True' and time.time() - timestamp > 3600):
                    # –ï—Å–ª–∏ –ª–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –±–æ–ª–µ–µ —á–∞—Å–∞ –Ω–∞–∑–∞–¥, –Ω–æ –Ω–µ –±—ã–ª –ø—Ä–æ–¥–∞–Ω, –≤—ã–≤–æ–¥–∏–º, —á—Ç–æ –æ–Ω "—Å–≥–æ—Ä–µ–ª"
                    expired_lots.append((pos, Fore.RED + str(element[0]), f" [{' '.join(emojis)}]"))  # v13
                elif element[-1] == 'False':  # –ï—Å–ª–∏ –ª–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–¥–∞–≤—Ü–æ–º
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ª–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞
                    result, cost_change = check(id)
                    if not result:  # –õ–æ—Ç –ø—Ä–æ–¥–∞–Ω
                        if id not in sold_ids:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ª–æ—Ç —É–∂–µ –ø—Ä–æ–¥–∞–Ω
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–¥–µ–ª–µ–Ω –ª–∏ –ª–æ—Ç —Å –ø–æ–º–æ—â—å—é Magenta
                            if str(id) == str(highlight_id) or (element[0] in my_names and f"[{' '.join(element[1])}]" in my_emojis):
                                sold_lots.append((pos, Fore.MAGENTA + str(element[0]), f" [{' '.join(emojis)}]"))
                                f.write('{} '.format(datetime.datetime.now().strftime("%d.%m.%y %H:%M")) + 'üôÇ ' + str(element[0]) + ' (' + str(pos) + ')' + "\n")  # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª —Å üôÇ
                            else:
                                sold_lots.append((pos, Fore.GREEN + str(element[0]), f" [{' '.join(emojis)}]"))
                                f.write('{} '.format(datetime.datetime.now().strftime("%d.%m.%y %H:%M")) + '‚úÖ ' + str(element[0]) + ' (' + str(pos) + ')' + "\n")  # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª —Å ‚úÖ
                            sold_ids.add(id)  # –î–æ–±–∞–≤–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ
                            s_p += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫–∏ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞–º–∏
                            s += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤
                    else:  # –°—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞
                        price_changed_lots.append((pos, Fore.GREEN + str(element[0]), f" [{' '.join(emojis)}]", Fore.WHITE + str(cost_change).replace('.0', ' ‚ÇΩ')))

                # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ª–æ—Ç –∏–∑ sellers_array –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
                sellers_array.remove(element)
                timestamps.pop(timestamp_index)
                r_r += 1

    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ—Ç–∞—Ö
    if sold_lots:
        count_sold = len(sold_lots)  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤
        added_ending, lot_ending = get_lot_ending(count_sold, "sold")  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ
        print(f'{Back.GREEN}{Fore.BLACK}{added_ending} {count_sold} {lot_ending}{Style.RESET_ALL} (üí≤)')
        if info_lots:
            for pos, name, emojis in sold_lots:
                print(f'{pos:>3} {name:<24}{emojis}')
            print()

    if expired_lots:
        count_expired = len(expired_lots)  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≥–æ—Ä–µ–≤—à–∏—Ö –ª–æ—Ç–æ–≤
        added_ending, lot_ending = get_lot_ending(count_expired, "expired")  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ
        print(f'{Back.RED}{added_ending} {count_expired} {lot_ending}{Style.RESET_ALL} (üî•)')
        if info_lots:
            for pos, name, emojis in expired_lots:
                print(f'{pos:>3} {name:<24}{emojis}')
            print()

    if price_changed_lots:
        count_changed = len(price_changed_lots)  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤
        added_ending, lot_ending = get_lot_ending(count_changed, "changed")  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ
        print(f'{Back.YELLOW}{Fore.BLACK}{added_ending} {count_changed}{lot_ending}{Style.RESET_ALL} (‚úèÔ∏è)')
        if info_lots:
            for pos, name, emojis, cost_change in price_changed_lots:
                print(f'{pos:>3} {name:<24}{emojis}{Fore.WHITE} –Ω–∞ {cost_change}')
            print()


# –ß–∞—Å—Ç—å 12: –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ª–æ—Ç–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ ¬´—Ä–∞–∫–µ—Ç¬ª #
    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ª–æ—Ç—ã –≤ —Å–ª—É—á–∞–µ –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ –ø–æ–≤—ã—à–µ–Ω–∏—è
    raise_lots = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≤—ã—à–µ–Ω–∏—è—Ö
    for element in selection_array[:15]: # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 15 –ª–æ—Ç–æ–≤

        # –ó–∞–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏
        emojis = element[1][:]  # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞ —ç–º–æ–¥–∑–∏
        for j in range(len(emojis)):
            emojis[j] = custom_emojis.get(emojis[j], "\u3000")  # –ó–∞–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª–∏–Ω–Ω—ã–π –ø—Ä–æ–±–µ–ª
        while len(emojis) < 3:
            emojis.insert(0, "\u3000")

        if element in sellers_array and sellers_array.index(element) - selection_array.index(element) > r_r:
            r += 1 # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Ä–∞–∫–µ—Ç
            old_index = sellers_array.index(element)
            new_index = selection_array.index(element)
            sellers_array.remove(element) # –£–±–∏—Ä–∞–µ–º –ª–æ—Ç –∏–∑ —Å—Ç–∞—Ä–æ–π –ø–æ–∑–∏—Ü–∏–∏
            sellers_array.insert(new_index, element) # –í—Å—Ç–∞–≤–ª—è–µ–º –ª–æ—Ç –≤ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
            value_to_move = timestamps.pop(old_index)
            timestamps.insert(new_index, value_to_move) # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É

            # –ï—Å–ª–∏ –ª–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–¥–∞–≤—Ü–æ–º, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–æ–≤—ã—à–µ–Ω–∏—è
            if element[-1] == 'False':
                seller_id = element[2]
                if seller_id not in raise_count:
                    raise_count[seller_id] = 0
                raise_count[seller_id] += 1
                count = raise_count.get(seller_id)                
                raise_lots.append((Fore.GREEN + str(element[0]), f"[{' '.join(emojis)}]", old_index + 1, new_index + 1))  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏

    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≤—ã—à–µ–Ω–∏—è—Ö
    if raise_lots:
        count_raise = len(raise_lots)  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤
        added_ending, lot_ending = get_lot_ending(count_raise, "raise")  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ
        print(f'{Back.CYAN}{Fore.BLACK}{added_ending} {count_raise} {lot_ending}{Style.RESET_ALL} (üöÄ)')
        if info_lots:
            for name, emojis, old_pos, new_pos in raise_lots:
                print(f'  {"\u25B2"} {name:<24} {emojis} {Fore.WHITE}{Style.DIM}{old_pos:>4} {Style.RESET_ALL}> {Style.BRIGHT}{new_pos}')  # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏


# –ß–∞—Å—Ç—å 13: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Å–ø–∏—Å–∫–∞ –ª–æ—Ç–æ–≤ –∏ –ø–∞—É–∑–∞ #
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤ –≤ sellers_array, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è
    sellers_array = sellers_array[:30000]
    timestamps = timestamps [:30000]
    cached_data = None # –û—á–∏—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    r_r = 1 # –°–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–∞ —Ä–∞–∫–µ—Ç

    # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º
    time.sleep(delay)
