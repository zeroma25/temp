import requests
import json
import time
import os
import math
import argparse
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from colorama import init, Fore, Back, Style

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama
init()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
USE_BRIGHT_COLORS = False
BASE_URL_VOLUMES = "https://t2.ru/api/exchange/lots/stats/volumes"
BASE_URL_LOTS = "https://t2.ru/api/exchange/lots"
USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
TRAFFIC_TYPES = {"1": "data", "2": "voice", "3": "sms"}
UNIT_TYPES = {"data": "–ì–±", "voice": "–º–∏–Ω", "sms": "SMS"}
VOLUME_LIMITS = {
    "data": (1, 120),
    "voice": (50, 3000),
    "sms": (50, 500)
}
UPDATE_INTERVAL = 6
DEPTH = 30
MAIN_LOTS_LIMIT = 15
LOT_LIMIT = 200
MAX_NAME_LENGTH = len("–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü")  # 17 —Å–∏–º–≤–æ–ª–æ–≤
EMOJI_MAP = {
    "devil": "üëø", "cool": "üòé", "cat": "üê±", "zipped": "ü§ê",
    "scream": "üò±", "rich": "ü§ë", "tongue": "üòõ", "bomb": "üí£"
}
TEXT_EMOJI_MAP = {
    "devil": "devil ", "cool": "cool  ", "cat": "cat   ",
    "zipped": "zipped", "scream": "scream", "rich": "rich  ",
    "tongue": "tongue", "bomb": "bomb  "
}
DEFAULT_EMOJI = "\u3000"
TEXT_DEFAULT_EMOJI = "--    "
SEPARATOR = "-" * 36
TEXT_SEPARATOR = "-" * 48
TRACKED_LOTS_FILE = "tracked_lots.json"
TRACKED_LOTS_LIMIT = 10
REQUEST_TIMEOUT = 5
RETRY_INTERVAL = 10

def get_color(color):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —è—Ä–∫–∏–π –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç USE_BRIGHT_COLORS."""
    if not USE_BRIGHT_COLORS:
        return color

    color_map = {
        Fore.RED: Fore.LIGHTRED_EX,
        Fore.GREEN: Fore.LIGHTGREEN_EX,
        Fore.YELLOW: Fore.LIGHTYELLOW_EX,
        Fore.MAGENTA: Fore.LIGHTMAGENTA_EX,
        Fore.CYAN: Fore.LIGHTCYAN_EX,
        Fore.BLACK: Fore.LIGHTWHITE_EX,
        Fore.WHITE: Fore.LIGHTWHITE_EX,
    }
    return color_map.get(color, color)

def clear_screen():
    """–û—á–∏—â–∞–µ—Ç —ç–∫—Ä–∞–Ω –∫–æ–Ω—Å–æ–ª–∏."""
    os.system('cls' if os.name == 'nt' else 'clear')

def format_cost(cost: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å, —É–±–∏—Ä–∞—è '.0' –µ—Å–ª–∏ –µ—Å—Ç—å."""
    return str(int(cost)) if cost.is_integer() else str(cost)

def format_duration(start_time: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ 00—á 05–º 03—Å."""
    duration = time.time() - start_time
    hours = int(duration // 3600)
    minutes = int((duration % 3600) // 60)
    seconds = int(duration % 60)
    return f"{hours:02d}—á {minutes:02d}–º {seconds:02d}—Å"

def format_interval(minutes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ 00—á 00–º 00—Å."""
    hours = int(minutes // 60)
    remaining_minutes = int(minutes % 60)
    return f"{hours:02d}—á {remaining_minutes:02d}–º 00—Å"

def load_tracked_lots(traffic_type: str, volume: int) -> List[str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç ID –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ª–æ—Ç–æ–≤ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ traffic_type –∏ volume."""
    if os.path.exists(TRACKED_LOTS_FILE):
        with open(TRACKED_LOTS_FILE, "r", encoding="utf-8") as f:
            tracked_lots = json.load(f)
            key = f"{traffic_type}_{volume}"
            return tracked_lots.get(key, [])
    return []

def save_tracked_lots(tracked_lots: Dict[str, List[str]]):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ª–æ—Ç–æ–≤ –≤ —Ñ–∞–π–ª —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ trafficType –∏ volume."""
    items = []
    for key, value in tracked_lots.items():
        traffic_type, volume = key.split("_")
        volume = int(volume)
        items.append((traffic_type, volume, key, value))
    
    items.sort(key=lambda x: (x[0], x[1]))
    sorted_tracked_lots = {item[2]: item[3] for item in items}
    
    with open(TRACKED_LOTS_FILE, "w", encoding="utf-8") as f:
        json.dump(sorted_tracked_lots, f, ensure_ascii=False, indent=4)

def get_cost_limits(traffic_type: str, volume: int) -> Tuple[float, float]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ –∏ –æ–±—ä—ë–º–∞."""
    if traffic_type == "data":
        min_cost = volume * 15
        max_cost = volume * 50
    elif traffic_type == "voice":
        min_cost = math.ceil(volume * 0.8)
        max_cost = volume * 2
    elif traffic_type == "sms":
        min_cost = math.ceil(volume * 0.5)
        max_cost = math.floor(volume * 5.5)
    else:
        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç—Ä–∞—Ñ–∏–∫–∞: {traffic_type}")
    return min_cost, max_cost

def get_user_input(traffic_type: Optional[str] = None, volume: Optional[int] = None) -> Tuple[str, int, Optional[float]]:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–∏–ø —Ç—Ä–∞—Ñ–∏–∫–∞, —Ä–∞–∑–º–µ—Ä –ª–æ—Ç–∞ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –≤–≤–æ–¥–æ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
    if traffic_type is None:
        while True:
            print("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞—Ñ–∏–∫–∞: 1 - –ì–± (data), 2 - –º–∏–Ω—É—Ç—ã (voice), 3 - —Å–º—Å (sms):")
            traffic_input = input().strip()
            if traffic_input in TRAFFIC_TYPES:
                traffic_type = TRAFFIC_TYPES[traffic_input]
                break
            else:
                print(f"{get_color(Fore.YELLOW)}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3.{Style.RESET_ALL}")

    unit = UNIT_TYPES[traffic_type]
    if volume is None:
        min_volume, max_volume = VOLUME_LIMITS[traffic_type]
        while True:
            print(f"–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ª–æ—Ç–∞ ({unit}) –æ—Ç {min_volume} –¥–æ {max_volume}:")
            try:
                volume = int(input().strip())
                if min_volume <= volume <= max_volume:
                    break
                else:
                    print(f"{get_color(Fore.YELLOW)}–û—à–∏–±–∫–∞: –†–∞–∑–º–µ—Ä –ª–æ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç {min_volume} –¥–æ {max_volume}.{Style.RESET_ALL}")
            except ValueError:
                print(f"{get_color(Fore.YELLOW)}–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.{Style.RESET_ALL}")

    while True:
        min_cost_limit, max_cost_limit = get_cost_limits(traffic_type, volume)
        print(f"–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ—Ç–∞ (—Ä—É–±.) –æ—Ç {min_cost_limit} –¥–æ {max_cost_limit} (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã —Å –±–∏—Ä–∂–∏):")
        cost_input = input().strip()

        if cost_input:
            try:
                cost = float(cost_input)
                if min_cost_limit <= cost <= max_cost_limit:
                    return traffic_type, volume, cost
                else:
                    print(f"{get_color(Fore.YELLOW)}–û—à–∏–±–∫–∞: –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {min_cost_limit} –¥–æ {max_cost_limit}.{Style.RESET_ALL}")
            except ValueError:
                print(f"{get_color(Fore.YELLOW)}–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.{Style.RESET_ALL}")
        else:
            return traffic_type, volume, None

def select_tracked_lot(lots: List[Dict[str, str]], traffic_type: str, volume: int, cost: float, use_text_emojis: bool = False) -> Optional[str]:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—ã–µ TRACKED_LOTS_LIMIT –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ (–Ω–µ –±–æ—Ç–æ–≤) –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ª–æ—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."""
    sellers = [lot for lot in lots if not lot["my"]][:TRACKED_LOTS_LIMIT]
    if not sellers:
        print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
        return None

    print(f"\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (–ø–µ—Ä–≤—ã–µ {TRACKED_LOTS_LIMIT}, –∏—Å–∫–ª—é—á–∞—è –±–æ—Ç–æ–≤):")
    positions = []
    for i, lot in enumerate(lots, 1):
        if not lot["my"] and len(positions) < TRACKED_LOTS_LIMIT:
            positions.append(i)
            name = lot["name"].ljust(MAX_NAME_LENGTH)
            emojis = process_emojis(lot["emojis"], use_text_emojis)
            print(f"{get_color(Fore.GREEN)}{i:2} {name}  [{emojis}]{Style.RESET_ALL}")

    while True:
        print("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–æ—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
        choice = input().strip()
        if choice == "":
            return None
        try:
            pos = int(choice)
            if pos in positions:
                lot_index = pos - 1
                while lots[lot_index]["my"]:
                    lot_index -= 1
                return lots[pos - 1]["id"]
            else:
                print(f"{get_color(Fore.YELLOW)}–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞: {', '.join(map(str, positions))}.{Style.RESET_ALL}")
        except ValueError:
            print(f"{get_color(Fore.YELLOW)}–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter.{Style.RESET_ALL}")

def get_min_cost(traffic_type: str, volume: int) -> float:
    """–ü–æ–ª—É—á–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ –∏ –æ–±—ä—ë–º–∞."""
    headers = {"User-Agent": USER_AGENT}
    url = f"{BASE_URL_VOLUMES}?trafficType={traffic_type}"
    
    try:
        response = requests.get(url, headers=headers, timeout=REQUEST_TIMEOUT)
        response.raise_for_status()
        data = response.json()
        
        if data["meta"]["status"] != "OK":
            raise ValueError(f"–û—à–∏–±–∫–∞ API: {data['meta']['message']}")
        
        for item in data["data"]:
            if item["volume"] == float(volume):
                return item["minCost"]
        raise ValueError(f"–†–∞–∑–º–µ—Ä –ª–æ—Ç–∞ {volume} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–∏–ø–∞ {traffic_type}.")
    except requests.RequestException as e:
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API volumes: {e}") from e
    except (KeyError, json.JSONDecodeError) as e:
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ API volumes: {e}") from e

def fetch_lots(traffic_type: str, volume: int, min_cost: float) -> List[Dict[str, str]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ LOT_LIMIT –ª–æ—Ç–æ–≤ —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Ü–µ–Ω–æ–π, –≤–∫–ª—é—á–∞—è —ç–º–æ–¥–∑–∏."""
    headers = {"User-Agent": USER_AGENT}
    url = f"{BASE_URL_LOTS}?trafficType={traffic_type}&volume={volume}&cost={min_cost}&limit={LOT_LIMIT}"
    
    attempt = 0
    while True:
        try:
            attempt += 1
            response = requests.get(url, headers=headers, timeout=REQUEST_TIMEOUT)
            response.raise_for_status()
            data = response.json()
            
            if data["meta"]["status"] != "OK":
                raise ValueError(f"–û—à–∏–±–∫–∞ API: {data['meta']['message']}")
            
            lots = []
            for lot in data["data"]:
                seller_name = lot["seller"]["name"] or "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü"
                lots.append({
                    "id": lot["id"],
                    "name": seller_name,
                    "my": lot["my"],
                    "cost": lot["cost"]["amount"],
                    "emojis": lot["seller"]["emojis"]
                })
            return lots
        except requests.RequestException:
            print(f"{get_color(Fore.YELLOW)}–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API lots. –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è {attempt}.{Style.RESET_ALL}")
            time.sleep(RETRY_INTERVAL)
        except (KeyError, json.JSONDecodeError) as e:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ API lots: {e}") from e

def fetch_all_lots(traffic_type: str, volume: int) -> List[Dict[str, str]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ LOT_LIMIT –ª–æ—Ç–æ–≤ –≤—Å–µ—Ö —Ü–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏."""
    headers = {"User-Agent": USER_AGENT}
    url = f"{BASE_URL_LOTS}?trafficType={traffic_type}&volume={volume}&limit={LOT_LIMIT}"
    
    attempt = 0
    while True:
        try:
            attempt += 1
            response = requests.get(url, headers=headers, timeout=REQUEST_TIMEOUT)
            response.raise_for_status()
            data = response.json()
            
            if data["meta"]["status"] != "OK":
                raise ValueError(f"–û—à–∏–±–∫–∞ API: {data['meta']['message']}")
            
            lots = []
            for lot in data["data"]:
                lots.append({
                    "id": lot["id"],
                    "name": lot["seller"]["name"] or "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü",
                    "my": lot["my"],
                    "cost": lot["cost"]["amount"],
                    "emojis": lot["seller"]["emojis"]
                })
            return lots
        except requests.RequestException:
            print(f"{get_color(Fore.YELLOW)}–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API all lots. –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è {attempt}.{Style.RESET_ALL}")
            time.sleep(RETRY_INTERVAL)
        except (KeyError, json.JSONDecodeError) as e:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ API all lots: {e}") from e

def log_sale(lot: Dict[str, str], position: int, traffic_type: str, volume: int, min_cost: float, is_tracked: bool = False):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–Ω–Ω–æ–º –ª–æ—Ç–µ –≤ —Ñ–∞–π–ª —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –∏–º–µ–Ω–µ–º."""
    timestamp = datetime.now()
    folder = f"sales/{timestamp.strftime('%Y_%m')}"
    os.makedirs(folder, exist_ok=True)
    cost_str = format_cost(min_cost)
    filename = f"{folder}/sales_{traffic_type}_{volume}_{cost_str}.txt"
    
    marker = "[–Ø]" if is_tracked else ("[–ü]" if not lot["my"] else "[–ë]")
    log_entry = f"{timestamp.strftime('%d.%m.%y %H:%M')} {marker} {lot['name']} ({position + 1})\n"
    
    with open(filename, "a", encoding="utf-8") as f:
        f.write(log_entry)

def read_last_sales(traffic_type: str, volume: int, min_cost: float, limit: int = MAIN_LOTS_LIMIT) -> List[str]:
    """–ß–∏—Ç–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ –ª–æ—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)."""
    cost_str = format_cost(min_cost)
    folder = f"sales/{datetime.now().strftime('%Y_%m')}"
    filename = f"{folder}/sales_{traffic_type}_{volume}_{cost_str}.txt"
    
    if not os.path.exists(filename):
        return []
    
    with open(filename, "r", encoding="utf-8") as f:
        lines = f.readlines()
        return lines[-limit:][::-1]

def colorize_sale_line(sale_line: str) -> str:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ü–≤–µ—Ç–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–¥–∞–∂–∏."""
    if "[–ü]" in sale_line:
        return sale_line.replace("[–ü]", f"{get_color(Fore.GREEN)}[–ü]{Style.RESET_ALL}")
    elif "[–ë]" in sale_line:
        return sale_line.replace("[–ë]", f"{get_color(Fore.RED)}[–ë]{Style.RESET_ALL}")
    elif "[–Ø]" in sale_line:
        return sale_line.replace("[–Ø]", f"{get_color(Fore.MAGENTA)}[–Ø]{Style.RESET_ALL}")
    return sale_line

def process_emojis(emojis: List[str], use_text_emojis: bool = False) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏, –∑–∞–º–µ–Ω—è–µ—Ç –∏—Ö –∏ –¥–æ–ø–æ–ª–Ω—è–µ—Ç –¥–æ 3-—Ö."""
    emoji_map = TEXT_EMOJI_MAP if use_text_emojis else EMOJI_MAP
    default_emoji = TEXT_DEFAULT_EMOJI if use_text_emojis else DEFAULT_EMOJI
    result = []
    for emoji in emojis:
        result.append(emoji_map.get(emoji, default_emoji))
    
    while len(result) < 3:
        result.insert(0, default_emoji)
    
    return " ".join(result[:3])

def track_changes(prev_lots: List[Dict], curr_lots: List[Dict], traffic_type: str, volume: int, min_cost: float, tracked_lot_ids: List[str]) -> Tuple[int, int, int, int, int, List[Dict], List[Dict], List[Dict], List[Dict], List[str]]:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, —Å–ø–∏—Å–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏ –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ª–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏."""
    prev_ids = {lot["id"]: idx for idx, lot in enumerate(prev_lots)}
    curr_ids = {lot["id"]: idx for idx, lot in enumerate(curr_lots)}
    prev_track_ids = {lot["id"] for lot in prev_lots[:DEPTH]}
    
    created_ids = {lot["id"] for lot in curr_lots[:DEPTH] if lot["id"] not in prev_ids}
    created_lots = [dict(lot, position=curr_ids[lot["id"]], timestamp=datetime.now()) for lot in curr_lots if lot["id"] in created_ids]
    created_bots = sum(1 for lot in created_lots if lot["my"])
    created_sellers = len(created_lots) - created_bots
    
    sold_ids = prev_track_ids - set(curr_ids.keys())
    
    sold_lots = []
    changed_lots = []
    true_sold_ids = set()
    
    sold_bot_ids = {lot_id for lot_id in sold_ids if prev_lots[prev_ids[lot_id]]["my"]}
    sold_seller_ids = sold_ids - sold_bot_ids
    
    if sold_seller_ids:
        all_lots = fetch_all_lots(traffic_type, volume)
        all_lots_dict = {lot["id"]: lot for lot in all_lots}
        
        true_sold_ids = {lot_id for lot_id in sold_ids if lot_id not in all_lots_dict or all_lots_dict[lot_id]["cost"] == min_cost}
        sold_lots = [dict(prev_lots[prev_ids[lot_id]], position=prev_ids[lot_id], timestamp=datetime.now()) for lot_id in true_sold_ids]
        
        for lot_id in sold_ids - true_sold_ids:
            if lot_id in all_lots_dict and all_lots_dict[lot_id]["cost"] != min_cost:
                changed_lot = dict(all_lots_dict[lot_id], position=prev_ids[lot_id], new_cost=all_lots_dict[lot_id]["cost"])
                changed_lots.append(changed_lot)
    else:
        true_sold_ids = sold_bot_ids
        sold_lots = [dict(prev_lots[prev_ids[lot_id]], position=prev_ids[lot_id], timestamp=datetime.now()) for lot_id in sold_bot_ids]
    
    sold_bots = sum(1 for lot in sold_lots if lot["my"])
    sold_sellers = len(sold_lots) - sold_bots
    
    sold_tracked_lot_ids = [lot_id for lot_id in true_sold_ids if lot_id in tracked_lot_ids]
    for lot in sold_lots:
        is_tracked = lot["id"] in tracked_lot_ids
        log_sale(lot, lot["position"], traffic_type, volume, min_cost, is_tracked)
    
    rockets = 0
    rocket_lots = []
    sales_shift = len(sold_ids)
    for lot_id, curr_pos in curr_ids.items():
        if lot_id not in prev_ids:
            continue
        prev_pos = prev_ids[lot_id]
        lot = curr_lots[curr_pos]
        if lot["my"]:
            continue
        
        creations_above = sum(1 for cid in created_ids if curr_ids.get(cid, LOT_LIMIT) < curr_pos)
        expected_pos = prev_pos - sales_shift + creations_above
        
        if (prev_pos > DEPTH and curr_pos < DEPTH) or (prev_pos <= DEPTH and curr_pos < prev_pos):
            if curr_pos < expected_pos:
                rockets += 1
                rocket_lots.append(dict(lot, position=curr_pos, prev_position=prev_pos, timestamp=datetime.now()))
    
    return created_bots, created_sellers, sold_bots, sold_sellers, rockets, created_lots, sold_lots, rocket_lots, changed_lots, sold_tracked_lot_ids

def parse_args():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    parser = argparse.ArgumentParser(description="–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ª–æ—Ç–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ.")
    parser.add_argument("-tt", "--trafficType", type=str, choices=["1", "2", "3"], help="–¢–∏–ø —Ç—Ä–∞—Ñ–∏–∫–∞: 1 - data, 2 - voice, 3 - sms")
    parser.add_argument("-v", "--volume", type=int, help="–†–∞–∑–º–µ—Ä –ª–æ—Ç–∞")
    parser.add_argument("-c", "--cost", type=float, help="–°—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ—Ç–∞")
    parser.add_argument("-u", "--updateInterval", type=int, default=UPDATE_INTERVAL, help=f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {UPDATE_INTERVAL})")
    parser.add_argument("-d", "--depth", type=int, default=DEPTH, help=f"–ì–ª—É–±–∏–Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {DEPTH})")
    parser.add_argument("-ll", "--mainLotsLimit", type=int, default=MAIN_LOTS_LIMIT, help=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {MAIN_LOTS_LIMIT})")
    parser.add_argument("-tl", "--trackLot", action="store_true", help="–ó–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ª–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
    parser.add_argument("-bc", "--brightColors", action="store_true", help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False)")
    parser.add_argument("-hh", "--hideHistory", action="store_true", help="–°–∫—Ä—ã—Ç—å —Å—Ç–æ–ª–±–µ—Ü —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø—Ä–æ–¥–∞–∂")
    parser.add_argument("-te", "--textEmojis", action="store_true", help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–º–æ–¥–∑–∏ –≤–º–µ—Å—Ç–æ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö")
    parser.add_argument("-si", "--statInterval", type=int, help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)")
    return parser.parse_args()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞."""
    try:
        global USE_BRIGHT_COLORS
        global SEPARATOR

        args = parse_args()
        use_text_emojis = args.textEmojis
        if use_text_emojis:
            SEPARATOR = TEXT_SEPARATOR
            DEFAULT_EMOJI = TEXT_DEFAULT_EMOJI

        if args.trafficType and args.volume and args.cost is not None:
            traffic_type = TRAFFIC_TYPES[args.trafficType]
            volume = args.volume
            custom_cost = args.cost
            update_interval = args.updateInterval
            depth = args.depth
            main_lots_limit = args.mainLotsLimit
            track_lot = args.trackLot
            use_bright_colors = args.brightColors
            hide_history = args.hideHistory
            stat_interval = args.statInterval
        else:
            if args.trafficType:
                traffic_type = TRAFFIC_TYPES[args.trafficType]
                volume, custom_cost = None, None
            else:
                traffic_type, volume, custom_cost = None, None, None
            if args.volume:
                volume = args.volume
            if args.cost is not None:
                custom_cost = args.cost
            traffic_type, volume, custom_cost = get_user_input(traffic_type, volume)
            update_interval = UPDATE_INTERVAL
            depth = DEPTH
            main_lots_limit = MAIN_LOTS_LIMIT
            track_lot = args.trackLot
            use_bright_colors = args.brightColors
            hide_history = args.hideHistory
            stat_interval = args.statInterval

        USE_BRIGHT_COLORS = use_bright_colors

        unit = UNIT_TYPES[traffic_type]
        
        if custom_cost is None:
            min_cost = get_min_cost(traffic_type, volume)
            print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É —Å –±–∏—Ä–∂–∏: {format_cost(min_cost)} —Ä—É–±.")
        else:
            min_cost = custom_cost
            print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–≤–µ–¥—ë–Ω–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å: {format_cost(min_cost)} —Ä—É–±.")
        
        min_cost_str = format_cost(min_cost)

        tracked_lot_ids = load_tracked_lots(traffic_type, volume)
        tracked_lots = {}
        if os.path.exists(TRACKED_LOTS_FILE):
            with open(TRACKED_LOTS_FILE, "r", encoding="utf-8") as f:
                tracked_lots = json.load(f)

        if track_lot:
            initial_lots = fetch_lots(traffic_type, volume, min_cost)
            selected_lot_id = select_tracked_lot(initial_lots, traffic_type, volume, min_cost, use_text_emojis)
            if selected_lot_id and selected_lot_id not in tracked_lot_ids:
                tracked_lot_ids.append(selected_lot_id)
                lot_key = f"{traffic_type}_{volume}"
                tracked_lots[lot_key] = tracked_lot_ids
                save_tracked_lots(tracked_lots)

        print("–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ...")
        start_time = time.time()
        time.sleep(2)
        
        total_created_bots, total_created_sellers = 0, 0
        total_sold_bots, total_sold_sellers = 0, 0
        total_rockets = 0
        prev_lots = []
        
        # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
        created_events = []
        sold_events = []
        rocket_events = []
        
        last_sales = read_last_sales(traffic_type, volume, min_cost, main_lots_limit)
        
        while True:
            curr_lots = fetch_lots(traffic_type, volume, min_cost)
            
            if prev_lots:
                cb, cs, sb, ss, rockets, created_lots, sold_lots, rocket_lots, changed_lots, sold_tracked_lot_ids = track_changes(
                    prev_lots, curr_lots, traffic_type, volume, min_cost, tracked_lot_ids
                )
                total_created_bots += cb
                total_created_sellers += cs
                total_sold_bots += sb
                total_sold_sellers += ss
                total_rockets += rockets
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –≤ —Å–ø–∏—Å–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
                created_events.extend(created_lots)
                sold_events.extend(sold_lots)
                rocket_events.extend(rocket_lots)
                
                if sold_tracked_lot_ids:
                    tracked_lot_ids = [lot_id for lot_id in tracked_lot_ids if lot_id not in sold_tracked_lot_ids]
                    lot_key = f"{traffic_type}_{volume}"
                    tracked_lots[lot_key] = tracked_lot_ids
                    if not tracked_lot_ids:
                        tracked_lots.pop(lot_key, None)
                    save_tracked_lots(tracked_lots)
                
                if sold_lots:
                    last_sales = read_last_sales(traffic_type, volume, min_cost, main_lots_limit)
            
            created_total = total_created_bots + total_created_sellers
            denominator = created_total + total_rockets
            if denominator == 0:
                denominator = 1
            coef = (total_sold_sellers / denominator) * 100
            
            total_created_str = str(created_total)
            total_sold_str = str(total_sold_bots + total_sold_sellers)
            bots_created_str = str(total_created_bots)
            bots_sold_str = str(total_sold_bots)
            sellers_created_str = str(total_created_sellers)
            sellers_sold_str = str(total_sold_sellers)
            rockets_str = str(total_rockets)
            coef_str = f"{coef:.1f}"
            
            align_total = max(len(total_created_str), len(total_sold_str))
            align_bots = max(len(bots_created_str), len(bots_sold_str))
            align_sellers = max(len(sellers_created_str), len(sellers_sold_str))
            
            bots_created_colored = f"{get_color(Fore.RED)}{bots_created_str.rjust(align_bots)}{Style.RESET_ALL}"
            bots_sold_colored = f"{get_color(Fore.RED)}{bots_sold_str.rjust(align_bots)}{Style.RESET_ALL}"
            sellers_created_colored = f"{get_color(Fore.GREEN)}{sellers_created_str.rjust(align_sellers)}{Style.RESET_ALL}"
            sellers_sold_colored = f"{get_color(Fore.GREEN)}{sellers_sold_str.rjust(align_sellers)}{Style.RESET_ALL}"
            
            clear_screen()
            print(f"–õ–æ—Ç: {get_color(Fore.YELLOW)}{volume} {unit}{Style.RESET_ALL}. –°—Ç–æ–∏–º–æ—Å—Ç—å: {get_color(Fore.YELLOW)}{min_cost_str} —Ä—É–±.{Style.RESET_ALL}")
            print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞: {get_color(Fore.YELLOW)}{format_duration(start_time)}{Style.RESET_ALL}")
            print(f"–°–æ–∑–¥–∞–Ω–æ: {Back.WHITE}{Fore.BLACK}{total_created_str.rjust(align_total)}{Style.RESET_ALL} ({bots_created_colored} + {sellers_created_colored})  –†–∞–∫–µ—Ç: {Back.CYAN}{Fore.BLACK}{rockets_str}{Style.RESET_ALL}")
            print(f"–ü—Ä–æ–¥–∞–Ω–æ: {Back.GREEN}{Fore.BLACK}{total_sold_str.rjust(align_total)}{Style.RESET_ALL} ({bots_sold_colored} + {sellers_sold_colored})  –ö–æ—ç—Ñ.: {Back.MAGENTA}{get_color(Fore.WHITE)}{coef_str}{Style.RESET_ALL}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            if stat_interval is not None:
                current_duration = time.time() - start_time
                interval_seconds = stat_interval * 60
                if current_duration >= interval_seconds:
                    interval_ago = datetime.now() - timedelta(minutes=stat_interval)
                    created_interval = [event for event in created_events if event.get("timestamp", datetime.now()) >= interval_ago]
                    sold_interval = [event for event in sold_events if event.get("timestamp", datetime.now()) >= interval_ago]
                    rocket_interval = [event for event in rocket_events if event.get("timestamp", datetime.now()) >= interval_ago]
                    
                    created_bots_interval = sum(1 for event in created_interval if event["my"])
                    created_sellers_interval = len(created_interval) - created_bots_interval
                    sold_bots_interval = sum(1 for event in sold_interval if event["my"])
                    sold_sellers_interval = len(sold_interval) - sold_bots_interval
                    rockets_interval = len(rocket_interval)
                    
                    created_total_interval = created_bots_interval + created_sellers_interval
                    denominator_interval = created_total_interval + rockets_interval
                    if denominator_interval == 0:
                        denominator_interval = 1
                    coef_interval = (sold_sellers_interval / denominator_interval) * 100
                    
                    created_total_interval_str = str(created_total_interval)
                    total_sold_interval_str = str(sold_bots_interval + sold_sellers_interval)
                    bots_created_interval_str = str(created_bots_interval)
                    bots_sold_interval_str = str(sold_bots_interval)
                    sellers_created_interval_str = str(created_sellers_interval)
                    sellers_sold_interval_str = str(sold_sellers_interval)
                    rockets_interval_str = str(rockets_interval)
                    coef_interval_str = f"{coef_interval:.1f}"
                    
                    align_total_interval = max(len(created_total_interval_str), len(total_sold_interval_str))
                    align_bots_interval = max(len(bots_created_interval_str), len(bots_sold_interval_str))
                    align_sellers_interval = max(len(sellers_created_interval_str), len(sellers_sold_interval_str))
                    
                    bots_created_interval_colored = f"{get_color(Fore.RED)}{bots_created_interval_str.rjust(align_bots_interval)}{Style.RESET_ALL}"
                    bots_sold_interval_colored = f"{get_color(Fore.RED)}{bots_sold_interval_str.rjust(align_bots_interval)}{Style.RESET_ALL}"
                    sellers_created_interval_colored = f"{get_color(Fore.GREEN)}{sellers_created_interval_str.rjust(align_sellers_interval)}{Style.RESET_ALL}"
                    sellers_sold_interval_colored = f"{get_color(Fore.GREEN)}{sellers_sold_interval_str.rjust(align_sellers_interval)}{Style.RESET_ALL}"
                    
                    print(SEPARATOR)
                    print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞: {get_color(Fore.YELLOW)}{format_interval(stat_interval)}{Style.RESET_ALL}")
                    print(f"–°–æ–∑–¥–∞–Ω–æ: {Back.WHITE}{Fore.BLACK}{created_total_interval_str.rjust(align_total_interval)}{Style.RESET_ALL} ({bots_created_interval_colored} + {sellers_created_interval_colored})  –†–∞–∫–µ—Ç: {Back.CYAN}{Fore.BLACK}{rockets_interval_str}{Style.RESET_ALL}")
                    print(f"–ü—Ä–æ–¥–∞–Ω–æ: {Back.GREEN}{Fore.BLACK}{total_sold_interval_str.rjust(align_total_interval)}{Style.RESET_ALL} ({bots_sold_interval_colored} + {sellers_sold_interval_colored})  –ö–æ—ç—Ñ.: {Back.MAGENTA}{get_color(Fore.WHITE)}{coef_interval_str}{Style.RESET_ALL}")
            
            print(SEPARATOR)
            
            display_limit = min(len(curr_lots), main_lots_limit)
            
            for i in range(display_limit):
                lot = curr_lots[i]
                position = str(i + 1).ljust(3)
                name = lot["name"].ljust(MAX_NAME_LENGTH)
                emojis = process_emojis(lot["emojis"], use_text_emojis)
                color = get_color(Fore.MAGENTA) if lot["id"] in tracked_lot_ids else (get_color(Fore.RED) if lot["my"] else get_color(Fore.GREEN))
                lot_line = f"{color}{position} {name}  [{emojis}]{Style.RESET_ALL}"
                
                sale_line = ""
                if not hide_history and i < len(last_sales):
                    sale_line = colorize_sale_line(last_sales[i].strip())
                
                print(f"{lot_line}  {sale_line}")
            
            print(SEPARATOR)
            
            tracked_lots_below_limit = [(i + 1, lot) for i, lot in enumerate(curr_lots[main_lots_limit:], main_lots_limit) if lot["id"] in tracked_lot_ids]
            if tracked_lots_below_limit:
                for position, lot in tracked_lots_below_limit:
                    name = lot["name"].ljust(MAX_NAME_LENGTH)
                    emojis = process_emojis(lot["emojis"], use_text_emojis)
                    line = f"{str(position).ljust(3)} {name}  [{emojis}]"
                    print(f"{get_color(Fore.MAGENTA)}{line}{Style.RESET_ALL}")
                print(SEPARATOR)
            
            if prev_lots:
                if created_lots:
                    print(f"{Back.WHITE}{Fore.BLACK} –°–æ–∑–¥–∞–Ω–æ –ª–æ—Ç–æ–≤: {len(created_lots)} {Style.RESET_ALL} {'+' if use_text_emojis else '‚ûï'}")
                    for lot in created_lots:
                        position = str(lot["position"] + 1).rjust(3)
                        name = lot["name"].ljust(MAX_NAME_LENGTH)
                        emojis = process_emojis(lot["emojis"], use_text_emojis)
                        line = f"{position} {name}  [{emojis}]"
                        color = get_color(Fore.RED) if lot["my"] else get_color(Fore.GREEN)
                        print(f"{color}{line}{Style.RESET_ALL}")
                    print()
                
                if sold_lots:
                    print(f"{Back.GREEN}{Fore.BLACK} –ü—Ä–æ–¥–∞–Ω–æ –ª–æ—Ç–æ–≤: {len(sold_lots)} {Style.RESET_ALL} {'$' if use_text_emojis else 'üí≤'}")
                    for lot in sold_lots:
                        position = str(lot["position"] + 1).rjust(3)
                        name = lot["name"].ljust(MAX_NAME_LENGTH)
                        emojis = process_emojis(lot["emojis"], use_text_emojis)
                        line = f"{position} {name}  [{emojis}]"
                        color = get_color(Fore.RED) if lot["my"] else get_color(Fore.GREEN)
                        print(f"{color}{line}{Style.RESET_ALL}")
                    print()
                
                if rocket_lots:
                    print(f"{Back.CYAN}{Fore.BLACK} –ü–æ–¥–Ω—è—Ç–æ –≤ —Ç–æ–ø: {len(rocket_lots)} {Style.RESET_ALL} {'‚ñ≤' if use_text_emojis else 'üöÄ'}")
                    for lot in rocket_lots:
                        position = str(lot["position"] + 1).rjust(3)
                        name = lot["name"].ljust(MAX_NAME_LENGTH)
                        emojis = process_emojis(lot["emojis"], use_text_emojis)
                        prev_pos = str(lot["prev_position"] + 1).rjust(3)
                        line = f"{position} {name}  [{emojis}] {Fore.LIGHTBLACK_EX}{prev_pos}{Style.RESET_ALL} > {Fore.LIGHTWHITE_EX}{lot['position'] + 1}{Style.RESET_ALL}"
                        print(f"{get_color(Fore.GREEN)}{line}{Style.RESET_ALL}")
                    print()
                
                if changed_lots:
                    print(f"{Back.YELLOW}{Fore.BLACK}–ò–∑–º–µ–Ω–µ–Ω–æ –ª–æ—Ç–æ–≤: {len(changed_lots)} {Style.RESET_ALL} {'*' if use_text_emojis else '‚úèÔ∏è'}")
                    for lot in changed_lots:
                        position = str(lot["position"] + 1).rjust(3)
                        name = lot["name"].ljust(MAX_NAME_LENGTH)
                        emojis = process_emojis(lot["emojis"], use_text_emojis)
                        old_cost = format_cost(min_cost)
                        new_cost = format_cost(lot["new_cost"])
                        line = f"{position} {name}  [{emojis}] {Fore.LIGHTBLACK_EX}{old_cost} —Ä—É–±.{Style.RESET_ALL} > {Fore.LIGHTWHITE_EX}{new_cost} —Ä—É–±.{Style.RESET_ALL}"
                        print(f"{get_color(Fore.GREEN)}{line}{Style.RESET_ALL}")
            
            prev_lots = curr_lots
            time.sleep(update_interval)
            
    except (ValueError, RuntimeError) as e:
        print(f"{get_color(Fore.RED)}–û—à–∏–±–∫–∞: {e}{Style.RESET_ALL}")
        print("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        input()
    except KeyboardInterrupt:
        print(f"\n{get_color(Fore.RED)}–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.{Style.RESET_ALL}")
        print("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        input()

if __name__ == "__main__":
    main()